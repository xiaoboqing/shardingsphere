server.port= 8088
# 数据分表配置
# 数据源配置
# 数据源名称，多数据源以逗号分隔
spring.shardingsphere.datasource.names=ds0,ds1

spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/db0?characterEncoding=utf-8&&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=root


#ds1 配置
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://47.111.252.79:3306/db1?characterEncoding=utf-8&&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=root

# 分库策略 根据id取模确定数据进哪个数据库
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{user_id % 2}

## 分表策略
## 表达式 `ds_$->{0..1}`枚举的数据源为读写分离配置的逻辑数据源名称
spring.shardingsphere.sharding.tables.course.actual-data-nodes = ds$->{0..1}.course_$->{0..1}

# 分表字段id
spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column = course_id
# 分表策略 根据id取模,确定数据最终落在那个表中
spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression = course_$->{course_id % 2}


# 使用SNOWFLAKE算法生成主键
spring.shardingsphere.sharding.tables.course.key-generator.column = course_id
spring.shardingsphere.sharding.tables.course.key-generator.type = SNOWFLAKE


spring.shardingsphere.props.sql.show = true
